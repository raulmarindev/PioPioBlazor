@page "/"
@using TweetModel = PioPioBlazor.Models.Tweet
@using PioPioBlazor.Services
@using PioPioBlazor.Components
@inject TwitterService _twitterService
@inject Models.ILanguageDictionary _languagesDict

@if (_tweets == null)
{
    <div class="lds-facebook mx-auto">
        <div class="bg-blue-400"></div>
        <div class="bg-blue-400"></div>
        <div class="bg-blue-400"></div>
    </div>
}
else if (!_tweets.Any())
{
    <h2 class="mb-10">You have reached the Twitter request limit. Please, try again in 10 - 15 minutes.</h2>
    <button class="bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" @onclick="() => { _retry = true; }">
        Try Again
    </button>
}
else
{
    <div class="md:flex md:justify-between">
        <TagSelector TItem="string"
                     SelectableTags="_hashTags"
                     @bind-SelectedTags="_selectedHashTags" Filter="@((item, term) => item.ToLower().Contains(term.ToLower()))"
                     Placeholder="Filter by hashtag..."
                     OnCreateTag="HandleCreateTag"
                     OnTagSelected="HandleSelectedTagsChange"
                     OnTagRemoved="HandleSelectedTagsChange">
            <TagTemplate>@context</TagTemplate>
        </TagSelector>

        <TagSelector TItem="string"
                     SelectableTags="_languages"
                     @bind-SelectedTags="_selectedLanguages" Filter="@((item, term) => item.ToLower().Contains(term.ToLower()))"
                     Placeholder="Filter by language..."
                     OnCreateTag="HandleCreateLanguageTag"
                     OnTagSelected="HandleSelectedTagsChange"
                     OnTagRemoved="HandleSelectedTagsChange">
            <TagTemplate>@context</TagTemplate>
        </TagSelector>
    </div>
    <SearchBox Placeholder="Text search..." SearchTerm="_searchTerm" SearchTermChanged="HandleTextChange" />

    <h2 class="mb-8">@_filteredTweets.Count() tweets retrieved</h2>

    int i;
    @for (i = 0; i < _filteredTweets.Count() && i < _numberOfTweetsShown; i++)
    {
        <Tweet State="@_filteredTweets[i]" />
    }

    if (i < _filteredTweets.Count())
    {
        <button class="bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded block mx-auto" @onclick="() => { _numberOfTweetsShown += 10; }">
            Load More Tweets
        </button>
    }
}

@code {
    private int _numberOfTweetsShown = 10;
    private bool _retry;

    private IEnumerable<TweetModel>
    _tweets;

    private List<TweetModel>
    _filteredTweets;

    private IEnumerable<string>
    _hashTags;

    private IEnumerable<string>
    _languages;

    private string _searchTerm;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _retry)
        {
            // When execution reaches this point, the first *interactive* render
            // is complete. The component has an active connection to the browser.
            _tweets = await _twitterService.GetHomeTimelineTweets(_retry);
            _filteredTweets = _tweets.ToList();
            if (_filteredTweets.Any())
            {
                _hashTags = _filteredTweets.SelectMany(t => t.HashTags).Select(t => t.ToLower()).Distinct().OrderBy(t => t);

                var languageCodes = _filteredTweets.Select(t => t.Language).Distinct();

                _languages = languageCodes.Select(t => _languagesDict[t]).Distinct().OrderBy(t => t);
            }
            _retry = false;
            StateHasChanged();
        }
    }

    private IList<string>
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    _selectedHashTags = new List<string>
        ();

    void HandleCreateTag(string tag)
    {
        _selectedHashTags.Add(tag);
    }

    void HandleTextChange(string searchTerm)
    {
        _searchTerm = searchTerm;
        _filteredTweets = FilterTweetsBySelectedTags().ToList();
    }

    IEnumerable<TweetModel>
        FilterTweetsBySelectedTags()
    {
        var filteredTweets = _tweets;
        const int minSearchTermLength = 2;

        if (!string.IsNullOrWhiteSpace(_searchTerm) && _searchTerm.Length > minSearchTermLength)
        {
            filteredTweets = filteredTweets.Where(t => t.Text.Contains(_searchTerm, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_selectedHashTags.Any())
        {
            filteredTweets = filteredTweets.Where(t => t.HashTags.Intersect(_selectedHashTags, new Models.HashtagEqualityComparer()).Any());
        }

        if (_selectedLanguages.Any())
        {
            filteredTweets = filteredTweets.Where(t => _selectedLanguages.Contains(_languagesDict[t.Language]));
        }

        return filteredTweets;
    }

    void HandleSelectedTagsChange(string tag)
    {
        _filteredTweets = FilterTweetsBySelectedTags().ToList();
    }

    private IList<string>
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    _selectedLanguages = new List<string>
        ();

    void HandleCreateLanguageTag(string tag)
    {
        _selectedLanguages.Add(tag);
    }

}